AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Template to setup api gateway, apis, api keys and usage plan as part of bootstrap
Parameters:
  StageName:
    Type: String
  RegisterTenantLambdaExecutionRoleArn:
    Type: String
  TenantManagementLambdaExecutionRoleArn:
    Type: String
  RegisterTenantFunctionArn:
    Type: String
  ProvisionTenantFunctionArn:
    Type: String
  DeProvisionTenantFunctionArn:
    Type: String
  ActivateTenantFunctionArn:
    Type: String
  GetTenantsFunctionArn:
    Type: String
  CreateTenantFunctionArn:
    Type: String
  GetTenantFunctionArn:
    Type: String
  DeactivateTenantFunctionArn:
    Type: String
  UpdateTenantFunctionArn:
    Type: String
  GetTenantConfigFunctionArn:
    Type: String
  GetUsersFunctionArn:
    Type: String
  GetUserFunctionArn:
    Type: String
  UpdateUserFunctionArn:
    Type: String
  DisableUserFunctionArn:
    Type: String
  CreateTenantAdminUserFunctionArn:
    Type: String
  CreateUserFunctionArn:
    Type: String
  DisableUsersByTenantFunctionArn:
    Type: String
  EnableUsersByTenantFunctionArn:
    Type: String
  AuthorizerFunctionArn:
    Type: String
  ApiKeyOperationUsersParameter:
    Type: String
  ApiKeyPlatinumTierParameter:
    Type: String
  ApiKeyPremiumTierParameter:
    Type: String
  ApiKeyStandardTierParameter:
    Type: String
  ApiKeyBasicTierParameter:
    Type: String

Resources:
  ApiGatewayCloudWatchLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub apigateway-cloudwatch-publish-role-${AWS::Region}
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole

  ApiGatewayAttachCloudwatchLogArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogRole.Arn

  AdminApiGatewayAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api-gateway/access-logs-serverless-saas-admin-api
      RetentionInDays: 30
  AdminApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      MethodSettings:
        - DataTraceEnabled: False
          LoggingLevel: INFO
          MetricsEnabled: True
          ResourcePath: '/*'
          HttpMethod: '*'
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Effect: Allow
              Principal: '*'
              Action: 'execute-api:Invoke'
              Resource: ['execute-api:/*/*/*']
      AccessLogSetting:
        DestinationArn: !GetAtt AdminApiGatewayAccessLogs.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      TracingEnabled: True
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Join ['', ['serverless-saas-admin-api-', !Ref 'AWS::Region']]
        basePath: !Join ['', ['/', !Ref StageName]]
        x-amazon-apigateway-api-key-source: 'AUTHORIZER'
        schemes:
          - https
        paths:
          /registration:
            post:
              summary: Register a new tenant
              description: Register a new tenant
              produces:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !Ref RegisterTenantFunctionArn
                    - /invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock

        components:
          securitySchemes:
            api_key:
              type: 'apiKey'
              name: 'x-api-key'
              in: 'header'
            sigv4Reference:
              type: 'apiKey'
              name: 'Authorization'
              in: 'header'
              x-amazon-apigateway-authtype: 'awsSigv4'
            Authorizer:
              type: 'apiKey'
              name: 'Authorization'
              in: 'header'
              x-amazon-apigateway-authtype: 'custom'
              x-amazon-apigateway-authorizer:
                authorizerUri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !Ref AuthorizerFunctionArn
                    - /invocations
                authorizerResultTtlInSeconds: 60
                type: 'token'
      StageName: prod

Outputs:
  # UsagePlanBasicTier:
  #   Value: !Ref UsagePlanBasicTier
  # UsagePlanStandardTier:
  #   Value: !Ref UsagePlanStandardTier
  # UsagePlanPremiumTier:
  #   Value: !Ref UsagePlanPremiumTier
  # UsagePlanPlatinumTier:
  #   Value: !Ref UsagePlanPlatinumTier
  AdminApiGatewayApi:
    Value: !Ref AdminApiGatewayApi
